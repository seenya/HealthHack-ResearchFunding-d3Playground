<!DOCTYPE html>
<html lang="en">
<head>
    <title>VizMyGrant</title>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">

    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css">

    <script src="http://code.jquery.com/jquery-2.1.0.min.js"></script>

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>

    <script type="text/javascript" src="js/d3.js"></script>
    <script type="text/javascript" src="js/d3.layout.js"></script>

    <style type="text/css">
text {
  font-size: 11px;
  pointer-events: none;
}

text.parent {
  fill: #1f77b4;
}

circle {
  fill: #ccc;
  stroke: #999;
  pointer-events: all;
}

circle.parent {
  fill: #1f77b4;
  fill-opacity: .1;
  stroke: steelblue;
}

circle.parent:hover {
  stroke: #ff7f0e;
  stroke-width: .5px;
}

circle.child {
  pointer-events: none;
}
    </style>
    
</head>
<body>
    <header>Welcome to your visualisation heaven.</header>
        <form id="target" action="/api/getd3data">
        <input type="submit" value="Go"/>
    </form>

<script type="text/javascript">

var w = 1280,
    h = 800,
    r = 720,
    x = d3.scale.linear().range([0, r]),
    y = d3.scale.linear().range([0, r]),
    node,
    root;

var pack = d3.layout.pack()
    .size([r, r])
    .value(function(d) { return d.size; })

var vis = d3.select("body").insert("svg:svg", "h2")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(" + (w - r) / 2 + "," + (h - r) / 2 + ")");

var ensureChildExists = function(parent, childName) {
    if(parent.children) {
        for(var i = 0; i < parent.children.length; i++) {
            if(parent.children[i].name==childName) {
                console.log("existing-" + parent.name + ":" + childName);
                return parent.children[i];
            }
        };
    } else {
        parent.children = [];
    };
    console.log("new-" + parent.name + ":" + childName);
    var newChild = {"name":childName};
    parent.children.push(newChild);
    return newChild;
};

var populateChildren = function(parent, node, depth) {
    var propertyName = "level" + depth;
    if(node._id.hasOwnProperty(propertyName)){
        var child = ensureChildExists(parent, node._id[propertyName]);
        populateChildren(child, node, depth+1)

    } else {
        parent.size = node.total;
    }
}

var convertToFlareJSON = function(data) {
  var newData = {"name": ""};
  data.forEach(function(node) {
    populateChildren(newData, node, 1);
  })
  console.log(JSON.stringify(newData));
  return newData;
};

var buildCircles = function(data) {
  data = convertToFlareJSON(data);  
  node = root = data;

  var nodes = pack.nodes(root);

  vis.selectAll("circle")
      .data(nodes)
    .enter().append("svg:circle")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return d.r; })
      .on("click", function(d) { return zoom(node == d ? root : d); });

  vis.selectAll("text")
      .data(nodes)
    .enter().append("svg:text")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; })
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .style("opacity", function(d) { return d.r > 20 ? 1 : 0; })
      .text(function(d) { return d.name; });

  d3.select(window).on("click", function() { zoom(root); });
};

function zoom(d, i) {
  var k = r / d.r / 2;
  x.domain([d.x - d.r, d.x + d.r]);
  y.domain([d.y - d.r, d.y + d.r]);

  var t = vis.transition()
      .duration(d3.event.altKey ? 7500 : 750);

  t.selectAll("circle")
      .attr("cx", function(d) { return x(d.x); })
      .attr("cy", function(d) { return y(d.y); })
      .attr("r", function(d) { return k * d.r; });

  t.selectAll("text")
      .attr("x", function(d) { return x(d.x); })
      .attr("y", function(d) { return y(d.y); })
      .style("opacity", function(d) { return k * d.r > 20 ? 1 : 0; });

  node = d;
  d3.event.stopPropagation();
}

    </script>


<script type="text/javascript">
$("#target").submit(function( event ) {
  event.preventDefault();
  var otherData = JSON.parse('{"level":["CareerStage", "Gender"],"measure":"dollars"}');
  //alert(otherData);
  var data = {level:["CareerStage","Gender"],measure:"dollars"};
  $.post( "/api/getd3data", otherData)
      .done(function( returnedData ) {
        buildCircles(returnedData);
      });
});
</script>

</body>
</html>