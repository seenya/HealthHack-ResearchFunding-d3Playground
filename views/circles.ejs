<!DOCTYPE html>
<html lang="en">
<head>
    <title>VizMyGrant</title>


    <script type="text/javascript" src="js/jquery-2.1.0.min.js"></script>

    <!-- Latest compiled and minified JavaScript -->
    <script type="text/javascript" src="js/bootstrap.min.js"></script>

    <script type="text/javascript" src="js/d3.js"></script>
    <script type="text/javascript" src="js/d3.layout.js"></script>
    
    <script type="text/javascript" src="js/knockout-3.2.0.js"></script>

    <link rel="stylesheet" href="stylesheets/bootstrap.min.css">
    <link rel="stylesheet" href="stylesheets/grid.css">   

    <style type="text/css">
        text {
          font-size: 11px;
          pointer-events: none;
        }

        text.parent {
          fill: #1f77b4;
        }

        circle {
          fill: #ccc;
          stroke: #999;
          pointer-events: all;
        }

        circle.parent {
          fill: #1f77b4;
          fill-opacity: .1;
          stroke: steelblue;
        }

        circle.parent:hover {
          stroke: #ff7f0e;
          stroke-width: .5px;
        }

        circle.child {
          pointer-events: none;
        }
    </style>
    
</head>
<body>
    <div class="container">
        <div class="page-header">
            <h1>Welcome to VizMyGrant Circles.</h1>
        </div>


        <div class="row"/>
            <div class="col-md-4"><div data-bind="click: generateCircles">Refresh Circles <img src="images/ic_refresh_24px.svg" alt="Generate"/></div></div>
            <div class="col-md-4">
                <table>
                    <thead><tr>
                        <th>Available Levels</th><th>&nbsp;</th>
                    </tr></thead>
                    <tbody data-bind="foreach: availableLevels">
                        <tr>
                            <td data-bind="text: level"></td>
                            <td><div data-bind="click: $root.selectLevel"><img src="images/ic_thumb_up_24px.svg" alt="Add"/></div></td>
                        </tr>    
                    </tbody>
                    <tbody></tbody>
                </table>
            </div>
            <div class="col-md-4">
                <table>
                    <thead><tr>
                        <th>Selected Levels</th><th>&nbsp;</th><th>&nbsp;</th><th>&nbsp;</th>
                    </tr></thead>
                    <tbody data-bind="foreach: selectedLevels">
                        <tr>
                            <td data-bind="text: level"></td>
                            <td><!--<button data-bind="click: $root.moveLevelUp">Up</button>--></td>
                            <td><!--<button data-bind="click: $root.moveLevelDown">Down</button>--></td>
                            <td><div data-bind="click: $root.removeLevel"><img src="images/ic_thumb_down_24px.svg" alt="Add"/></div></td>
                        </tr>    
                    </tbody>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        

    </div>
<br/>

<script type="text/javascript">
$( document ).ready(function() {

    var ensureChildExists = function(parent, childName) {
        if(parent.children) {
            for(var i = 0; i < parent.children.length; i++) {
                if(parent.children[i].name==childName) {
                    console.log("existing-" + parent.name + ":" + childName);
                    return parent.children[i];
                }
            };
        } else {
            parent.children = [];
        };
        console.log("new-" + parent.name + ":" + childName);
        var newChild = {"name":childName};
        parent.children.push(newChild);
        return newChild;
    };

    var populateChildren = function(parent, node, depth) {
        var propertyName = "level" + depth;
        if(node._id.hasOwnProperty(propertyName)){
            var child = ensureChildExists(parent, node._id[propertyName]);
            populateChildren(child, node, depth+1)

        } else {
            parent.size = Math.floor(node.total);
        }
    }

    var convertToFlareJSON = function(data) {
      var newData = {"name": ""};
      data.forEach(function(node) {
        populateChildren(newData, node, 1);
      })
      console.log(JSON.stringify(newData));
      return newData;
    };

    var clearCircles = function() {
        var svg = d3.select("svg")
        svg.remove();
    };

    var w = 1280,
        h = 800,
        r = 720,
        x = d3.scale.linear().range([0, r]),
        y = d3.scale.linear().range([0, r]),
        node,
        root,
        pack, vis;

    var initialiseCircles = function() {

        pack = d3.layout.pack()
            .size([r, r])
            .value(function(d) { return d.size; })

        vis = d3.select("body").insert("svg:svg", "h2")
            .attr("width", w)
            .attr("height", h)
          .append("svg:g")
            .attr("transform", "translate(" + (w - r) / 2 + "," + (h - r) / 2 + ")");
        };

    var buildCircles = function(data) {
      clearCircles();
      initialiseCircles();

      data = convertToFlareJSON(data);  
      node = root = data;

      var nodes = pack.nodes(root);

      vis.selectAll("circle")
          .data(nodes)
        .enter().append("svg:circle")
          .attr("class", function(d) { return d.children ? "parent" : "child"; })
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; })
          .attr("r", function(d) { return d.r; })
          .on("click", function(d) { return zoom(node == d ? root : d); });

      vis.selectAll("text")
          .data(nodes)
        .enter().append("svg:text")
          .attr("class", function(d) { return d.children ? "parent" : "child"; })
          .attr("x", function(d) { return d.x; })
          .attr("y", function(d) { return d.y; })
          .attr("dy", ".35em")
          .attr("text-anchor", "middle")
          .style("opacity", function(d) { return d.r > 20 ? 1 : 0; })
          .text(function(d) { return d.size ? d.name + " (" + d.size + ")" : d.name; });

      d3.select(window).on("click", function() { zoom(root); });
    };

    function zoom(d, i) {
      var k = r / d.r / 2;
      x.domain([d.x - d.r, d.x + d.r]);
      y.domain([d.y - d.r, d.y + d.r]);

      var t = vis.transition()
          .duration(d3.event.altKey ? 7500 : 750);

      t.selectAll("circle")
          .attr("cx", function(d) { return x(d.x); })
          .attr("cy", function(d) { return y(d.y); })
          .attr("r", function(d) { return k * d.r; });

      t.selectAll("text")
          .attr("x", function(d) { return x(d.x); })
          .attr("y", function(d) { return y(d.y); })
          .style("opacity", function(d) { return k * d.r > 20 ? 1 : 0; });

      node = d;
      d3.event.stopPropagation();
    }

    // Class to represent a row in the seat reservations grid
    function Level(level,fieldName) {
        var self = this;
        self.level = level;
        self.fieldName = fieldName || level;
    }


    // Overall viewmodel for this screen, along with initial state
    function CirclesViewModel() {
        var self = this;

        // Non-editable catalog data - would come from the server
        self.availableLevels = ko.observableArray([
            new Level("Title"),
            new Level("CareerStage"),
            new Level("Grant Type", "GrantType"),
            new Level("Grant Sub Type", "GrantSubType"),
            new Level("Is Salary Grant", "IsSalaryGrant"),
            new Level("Broad Area", "BroadArea"),
            new Level("Category"),
            new Level("Institution"),
            new Level("State"),
            new Level("Field of Research", "FoR"),
            new Level("Gender")
        ]);    

        self.selectedLevels = ko.observableArray([]);

        self.selectLevel = function(selectedLevel) {
            self.availableLevels.remove(selectedLevel);
            self.selectedLevels.push(selectedLevel);
        };

        self.moveLevelUp = function(selectedLevel) {

        };

        self.moveLevelDown = function(selectedLevel) {

        };

        self.removeLevel = function(selectedLevel) {
            self.selectedLevels.remove(selectedLevel);
            self.availableLevels.push(selectedLevel);
        };

        self.generateCircles = function() {
            if(self.selectedLevels().length == 0) {
              alert("Please select at least 1 level");
            } else {
              var parameters = {"level":[],"measure":"count"};
              self.selectedLevels().forEach(function(level){
                  parameters.level.push(level.fieldName);
              });

              $.post( "/api/getd3data", parameters)
                  .done(function( returnedData ) {
                      buildCircles(returnedData);
              });
            }
        };
    };

    ko.applyBindings(new CirclesViewModel());
});
</script>

</body>
</html>